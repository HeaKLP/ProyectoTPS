/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Presentacion;

/**
 *
 * @author cris
 */
import Servicio.ConexionBD;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class interfazEstadisticas extends javax.swing.JPanel {

    /**
     * Creates new form interfazEstadisticas
     */
    public interfazEstadisticas() {
        initComponents();
        
        setLayout(new BorderLayout()); // Diseño principal

        // Panel para la gráfica
        JPanel panelGrafica = new JPanel();
        panelGrafica.setLayout(new BorderLayout());
        panelGrafica.add(crearGrafica(), BorderLayout.CENTER);

        // Agregar panel de gráfica a la interfaz
        this.add(panelGrafica, BorderLayout.CENTER);
    }

    private ChartPanel crearGrafica() {
        DefaultCategoryDataset dataset = obtenerDatosGrafica();

        JFreeChart grafica = ChartFactory.createBarChart(
                "Productos Más y Menos Vendidos - Semana",
                "Productos",
                "Cantidad Vendida",
                dataset
        );

        return new ChartPanel(grafica);
    }

    private DefaultCategoryDataset obtenerDatosGrafica() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        // SQL para los productos más y menos vendidos
        String sqlMasVendidos = """
                SELECT p.nombreComercialProducto, 
                       SUM(CASE WHEN t.tipoTransaccion = 'Venta' THEN t.cantidadTransaccion ELSE 0 END) AS ventas
                FROM Producto p
                JOIN Producto_has_Transaccion pt ON p.CodigoProducto = pt.Producto_CodigoProducto
                JOIN Transaccion t ON pt.Transaccion_codigoTransaccion = t.codigoTransaccion
                WHERE t.tipoTransaccion = 'Venta'
                AND WEEK(t.fechaTransaccion) = WEEK(CURDATE())
                GROUP BY p.CodigoProducto
                ORDER BY ventas DESC
                LIMIT 5
                """;

        String sqlMenosVendidos = """
                SELECT p.nombreComercialProducto, 
                       SUM(CASE WHEN t.tipoTransaccion = 'Venta' THEN t.cantidadTransaccion ELSE 0 END) AS ventas
                FROM Producto p
                JOIN Producto_has_Transaccion pt ON p.CodigoProducto = pt.Producto_CodigoProducto
                JOIN Transaccion t ON pt.Transaccion_codigoTransaccion = t.codigoTransaccion
                WHERE t.tipoTransaccion = 'Venta'
                AND WEEK(t.fechaTransaccion) = WEEK(CURDATE())
                GROUP BY p.CodigoProducto
                ORDER BY ventas ASC
                LIMIT 5
                """;

        try (Connection con = ConexionBD.crearConexionBD()) {
            // Obtener los productos más vendidos
            PreparedStatement ps = con.prepareStatement(sqlMasVendidos);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String nombreProducto = rs.getString("nombreComercialProducto");
                int ventas = rs.getInt("ventas");
                dataset.addValue(ventas, "Más Vendidos", nombreProducto);
            }

            // Obtener los productos menos vendidos
            ps = con.prepareStatement(sqlMenosVendidos);
            rs = ps.executeQuery();
            while (rs.next()) {
                String nombreProducto = rs.getString("nombreComercialProducto");
                int ventas = rs.getInt("ventas");
                dataset.addValue(ventas, "Menos Vendidos", nombreProducto);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al obtener datos: " + e.getMessage());
        }

        return dataset;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
